// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vanasheetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VanasheetClient is the client API for Vanasheet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VanasheetClient interface {
	// raw
	RawReadQuery(ctx context.Context, in *RawReadQueryRequest, opts ...grpc.CallOption) (*RawReadQueryResponse, error)
	// smart
	AppendRow(ctx context.Context, in *AppendRowRequest, opts ...grpc.CallOption) (*AppendRowResponse, error)
}

type vanasheetClient struct {
	cc grpc.ClientConnInterface
}

func NewVanasheetClient(cc grpc.ClientConnInterface) VanasheetClient {
	return &vanasheetClient{cc}
}

func (c *vanasheetClient) RawReadQuery(ctx context.Context, in *RawReadQueryRequest, opts ...grpc.CallOption) (*RawReadQueryResponse, error) {
	out := new(RawReadQueryResponse)
	err := c.cc.Invoke(ctx, "/vanasheetpb.Vanasheet/RawReadQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vanasheetClient) AppendRow(ctx context.Context, in *AppendRowRequest, opts ...grpc.CallOption) (*AppendRowResponse, error) {
	out := new(AppendRowResponse)
	err := c.cc.Invoke(ctx, "/vanasheetpb.Vanasheet/AppendRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VanasheetServer is the server API for Vanasheet service.
// All implementations must embed UnimplementedVanasheetServer
// for forward compatibility
type VanasheetServer interface {
	// raw
	RawReadQuery(context.Context, *RawReadQueryRequest) (*RawReadQueryResponse, error)
	// smart
	AppendRow(context.Context, *AppendRowRequest) (*AppendRowResponse, error)
	mustEmbedUnimplementedVanasheetServer()
}

// UnimplementedVanasheetServer must be embedded to have forward compatible implementations.
type UnimplementedVanasheetServer struct {
}

func (UnimplementedVanasheetServer) RawReadQuery(context.Context, *RawReadQueryRequest) (*RawReadQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawReadQuery not implemented")
}
func (UnimplementedVanasheetServer) AppendRow(context.Context, *AppendRowRequest) (*AppendRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendRow not implemented")
}
func (UnimplementedVanasheetServer) mustEmbedUnimplementedVanasheetServer() {}

// UnsafeVanasheetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VanasheetServer will
// result in compilation errors.
type UnsafeVanasheetServer interface {
	mustEmbedUnimplementedVanasheetServer()
}

func RegisterVanasheetServer(s grpc.ServiceRegistrar, srv VanasheetServer) {
	s.RegisterService(&_Vanasheet_serviceDesc, srv)
}

func _Vanasheet_RawReadQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawReadQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanasheetServer).RawReadQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanasheetpb.Vanasheet/RawReadQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanasheetServer).RawReadQuery(ctx, req.(*RawReadQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vanasheet_AppendRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanasheetServer).AppendRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vanasheetpb.Vanasheet/AppendRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanasheetServer).AppendRow(ctx, req.(*AppendRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vanasheet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vanasheetpb.Vanasheet",
	HandlerType: (*VanasheetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawReadQuery",
			Handler:    _Vanasheet_RawReadQuery_Handler,
		},
		{
			MethodName: "AppendRow",
			Handler:    _Vanasheet_AppendRow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vanasheet.proto",
}
